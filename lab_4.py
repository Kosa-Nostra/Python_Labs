# Функция для определения приоритета операторов
def priority(op):
    if op == '+' or op == '-':
        return 1  # Низкий приоритет для + и -
    if op == '*' or op == '/':
        return 2  # Высокий приоритет для * и /
    return 0  # Для скобок и других символов приоритет 0

# Функция для выполнения арифметических операций
def operations(a, b, op):
    if op == '+': return a + b
    if op == '-': return a - b
    if op == '*': return a * b
    if op == '/':
        if b == 0:
            raise ValueError("Делить на ноль нельзя!")
        return a / b

# Основная функция для вычисления выражения
def calc(tokens):
    values = []  # Стек для хранения чисел
    ops = []     # Стек для хранения операторов и скобок
    i = 0        # Индекс для прохода по строке

    # Проходим по каждому символу в строке
    while i < len(tokens):
        if tokens[i] == ' ':
            i += 1  # Пропускаем пробелы
            continue

        # Если текущий символ — открывающая скобка
        if tokens[i] == '(':
            ops.append(tokens[i])  # Добавляем её в стек операторов

        # Если текущий символ — цифра
        elif tokens[i].isdigit():
            val = 0
            # Собираем многоразрядное число
            while (i < len(tokens) and tokens[i].isdigit()):
                val = (val * 10) + int(tokens[i])  # Формируем число
                i += 1
            values.append(val)  # Добавляем число в стек значений
            i -= 1  # Возвращаемся на один символ назад, чтобы не пропустить следующий

        # Если текущий символ — закрывающая скобка
        elif tokens[i] == ')':
            # Выполняем все операции внутри скобок
            while len(ops) != 0 and ops[-1] != '(':
                val2 = values.pop()  # Берем второй операнд из стека значений
                val1 = values.pop()  # Берем первый операнд из стека значений
                op = ops.pop()       # Берем оператор из стека операторов
                values.append(operations(val1, val2, op))  # Вычисляем и добавляем результат в стек значений
            ops.pop()  # Удаляем открывающую скобку из стека операторов

        # Если текущий символ — оператор (+, -, *, /)
        else:
            # Выполняем операции с более высоким приоритетом перед добавлением нового оператора
            while (len(ops) != 0 and priority(ops[-1]) >= priority(tokens[i])):
                val2 = values.pop()  # Берем второй операнд
                val1 = values.pop()  # Берем первый операнд
                op = ops.pop()       # Берем оператор
                values.append(operations(val1, val2, op))  # Вычисляем и добавляем результат в стек значений
            ops.append(tokens[i])  # Добавляем текущий оператор в стек операторов

        i += 1  # Переходим к следующему символу

    # После прохода по всем символам выполняем оставшиеся операции
    while len(ops) != 0:
        val2 = values.pop()  # Берем второй операнд
        val1 = values.pop()  # Берем первый операнд
        op = ops.pop()       # Берем оператор
        values.append(operations(val1, val2, op))  # Вычисляем и добавляем результат в стек значений

    # Возвращаем итоговый результат (последний элемент в стеке значений)
    return values[-1]

# Основной блок программы
if __name__ == "__main__":
    primer = input("Введите арифметическое выражение: ")
    try:
        result = calc(primer)
        print("Результат:", result)
    except ValueError as e:
        print(e)